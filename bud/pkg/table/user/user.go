package user

import (
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	pogo "github.com/livebud/weblog/bud/pkg/table"
)

// GENERATED BY POGO. DO NOT EDIT.

// ErrUserNotFound returned if the "public"."users" is not found
var ErrUserNotFound = errors.New("user not found")

// User result data for "public"."users"
type User struct {
	CreatedAt time.Time `json:"created_at,omitempty"`
	Email     string    `json:"email,omitempty"`
	ID        int       `json:"id,omitempty"`
	Name      string    `json:"name,omitempty"`
	Password  string    `json:"password,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

var _ pogo.Row = (*User)(nil)

// Decode implements pogo.Row
func (u *User) Decode(user interface{}) error {
	_user, ok := user.(*User)
	if !ok {
		return fmt.Errorf(`user decode: "%T" is not a "*User"`, user)
	}
	*_user = *u
	return nil
}

// New "public"."users" input
func New() *Input {
	return &Input{}
}

// Input data for "public"."users"
type Input struct {
	createdAt *time.Time
	email     *string
	id        *int
	name      *string
	password  *string
	updatedAt *time.Time
}

var _ pogo.Insertable = (*Input)(nil)

// CreatedAt sets the created_at
func (u *Input) CreatedAt(createdAt time.Time) *Input {
	u.createdAt = &createdAt
	return u
}

// Email sets the email
func (u *Input) Email(email string) *Input {
	u.email = &email
	return u
}

// ID sets the id
func (u *Input) ID(id int) *Input {
	u.id = &id
	return u
}

// Name sets the name
func (u *Input) Name(name string) *Input {
	u.name = &name
	return u
}

// Password sets the password
func (u *Input) Password(password string) *Input {
	u.password = &password
	return u
}

// UpdatedAt sets the updated_at
func (u *Input) UpdatedAt(updatedAt time.Time) *Input {
	u.updatedAt = &updatedAt
	return u
}

// MarshalJSON marshals the "user" into JSON
func (u *Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(u)
}

// UnmarshalJSON unmarshals json to a "user"
func (u *Input) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, u)
}

// String of the input
// TODO: make this more useful
func (u *Input) String() string {
	return `"public"."users"`
}

func (u *Input) columns() map[string]interface{} {
	columns := make(map[string]interface{})

	if u.createdAt != nil {
		columns["created_at"] = *u.createdAt
	}

	if u.email != nil {
		columns["email"] = *u.email
	}

	if u.id != nil {
		columns["id"] = *u.id
	}

	if u.name != nil {
		columns["name"] = *u.name
	}

	if u.password != nil {
		columns["password"] = *u.password
	}

	if u.updatedAt != nil {
		columns["updated_at"] = *u.updatedAt
	}

	return columns
}

// Insert implements pogo.Insertable
func (u *Input) Insert(db pogo.DB) (pogo.Row, error) {
	return Insert(db, u)
}

// NewFilter creates a new filter
func NewFilter() *Filter {
	return &Filter{}
}

// Filter filters for "public"."users"
type Filter struct {
	formats []string
	values  []interface{}
	error   error
}

var _ pogo.Condition = (*Filter)(nil)

// Clause fn
func (f *Filter) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "WHERE",
		Format: strings.Join(f.formats, " AND "),
		Params: f.values,
		Error:  f.error,
	}
}

// And filter
// func (f *Filter) And(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " AND "))
//   return f
// }

// Or filter
// func (f *Filter) Or(filters ...*Filter) *Filter {
//   var clauses []string
//   for _, filter := range filters {
//     _ = filter
//     // clauses = append(clauses, string(filter.Condition()))
//   }
//   f.clauses = append(f.clauses, strings.Join(clauses, " OR "))
//   return f
// }

// CreatedAt created_at is equal to
func (f *Filter) CreatedAt(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" = %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// CreatedAtNot created_at is not equal to
func (f *Filter) CreatedAtNot(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" != %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// CreatedAtIn created_at is in
func (f *Filter) CreatedAtIn(v ...time.Time) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"created_at" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i.Format("2006-01-02 15:04:05.999999999Z07:00"))
	}
	return f
}

// CreatedAtNotIn created_at is not in
func (f *Filter) CreatedAtNotIn(v ...time.Time) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"created_at" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i.Format("2006-01-02 15:04:05.999999999Z07:00"))
	}
	return f
}

// CreatedAtLt created_at is less than
func (f *Filter) CreatedAtLt(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" < %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// CreatedAtLte created_at is less than or equal
func (f *Filter) CreatedAtLte(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" <= %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// CreatedAtGt created_at is greater than
func (f *Filter) CreatedAtGt(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" > %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// CreatedAtGte created_at is greater than or equal
func (f *Filter) CreatedAtGte(v time.Time) *Filter {
	f.formats = append(f.formats, `"created_at" >= %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// Email email equals
func (f *Filter) Email(v string) *Filter {
	f.formats = append(f.formats, `"email" = %s`)
	f.values = append(f.values, v)
	return f
}

// EmailNot email doesn't equal
func (f *Filter) EmailNot(v string) *Filter {
	f.formats = append(f.formats, `"email" != %s`)
	f.values = append(f.values, v)
	return f
}

// EmailContains email contains
func (f *Filter) EmailContains(v string) *Filter {
	f.formats = append(f.formats, `"email" LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// EmailNotContains email doesn't contain
func (f *Filter) EmailNotContains(v string) *Filter {
	f.formats = append(f.formats, `"email" NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// EmailStartsWith email starts with
func (f *Filter) EmailStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"email" LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// EmailNotStartsWith email doesn't start with
func (f *Filter) EmailNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"email" NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// EmailEndsWith email ends with
func (f *Filter) EmailEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"email" LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// EmailNotEndsWith email doesn't end with
func (f *Filter) EmailNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"email" NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// EmailLt email is less than
func (f *Filter) EmailLt(v string) *Filter {
	f.formats = append(f.formats, `"email" < %s`)
	f.values = append(f.values, v)
	return f
}

// EmailLte email is less than or equal
func (f *Filter) EmailLte(v string) *Filter {
	f.formats = append(f.formats, `"email" <= %s`)
	f.values = append(f.values, v)
	return f
}

// EmailGt email is greater than
func (f *Filter) EmailGt(v string) *Filter {
	f.formats = append(f.formats, `"email" > %s`)
	f.values = append(f.values, v)
	return f
}

// EmailGte email is greater than or equal
func (f *Filter) EmailGte(v string) *Filter {
	f.formats = append(f.formats, `"email" >= %s`)
	f.values = append(f.values, v)
	return f
}

// EmailIn email is in
func (f *Filter) EmailIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"email" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// EmailNotIn email is not in
func (f *Filter) EmailNotIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"email" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// ID id equals
func (f *Filter) ID(v int) *Filter {
	f.formats = append(f.formats, `"id" = %s`)
	f.values = append(f.values, v)
	return f
}

// IDNot id doesn't equal
func (f *Filter) IDNot(v int) *Filter {
	f.formats = append(f.formats, `"id" != %s`)
	f.values = append(f.values, v)
	return f
}

// IDLt id is less than
func (f *Filter) IDLt(v int) *Filter {
	f.formats = append(f.formats, `"id" < %s`)
	f.values = append(f.values, v)
	return f
}

// IDLte id is less than or equal
func (f *Filter) IDLte(v int) *Filter {
	f.formats = append(f.formats, `"id" <= %s`)
	f.values = append(f.values, v)
	return f
}

// IDGt id is greater than
func (f *Filter) IDGt(v int) *Filter {
	f.formats = append(f.formats, `"id" > %s`)
	f.values = append(f.values, v)
	return f
}

// IDGte id is greater than or equal
func (f *Filter) IDGte(v int) *Filter {
	f.formats = append(f.formats, `"id" >= %s`)
	f.values = append(f.values, v)
	return f
}

// IDIn id is in
func (f *Filter) IDIn(v ...int) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"id" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// IDNotIn id is not in
func (f *Filter) IDNotIn(v ...int) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"id" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Name name equals
func (f *Filter) Name(v string) *Filter {
	f.formats = append(f.formats, `"name" = %s`)
	f.values = append(f.values, v)
	return f
}

// NameNot name doesn't equal
func (f *Filter) NameNot(v string) *Filter {
	f.formats = append(f.formats, `"name" != %s`)
	f.values = append(f.values, v)
	return f
}

// NameContains name contains
func (f *Filter) NameContains(v string) *Filter {
	f.formats = append(f.formats, `"name" LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// NameNotContains name doesn't contain
func (f *Filter) NameNotContains(v string) *Filter {
	f.formats = append(f.formats, `"name" NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// NameStartsWith name starts with
func (f *Filter) NameStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"name" LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// NameNotStartsWith name doesn't start with
func (f *Filter) NameNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"name" NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// NameEndsWith name ends with
func (f *Filter) NameEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"name" LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// NameNotEndsWith name doesn't end with
func (f *Filter) NameNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"name" NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// NameLt name is less than
func (f *Filter) NameLt(v string) *Filter {
	f.formats = append(f.formats, `"name" < %s`)
	f.values = append(f.values, v)
	return f
}

// NameLte name is less than or equal
func (f *Filter) NameLte(v string) *Filter {
	f.formats = append(f.formats, `"name" <= %s`)
	f.values = append(f.values, v)
	return f
}

// NameGt name is greater than
func (f *Filter) NameGt(v string) *Filter {
	f.formats = append(f.formats, `"name" > %s`)
	f.values = append(f.values, v)
	return f
}

// NameGte name is greater than or equal
func (f *Filter) NameGte(v string) *Filter {
	f.formats = append(f.formats, `"name" >= %s`)
	f.values = append(f.values, v)
	return f
}

// NameIn name is in
func (f *Filter) NameIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"name" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// NameNotIn name is not in
func (f *Filter) NameNotIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"name" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// Password password equals
func (f *Filter) Password(v string) *Filter {
	f.formats = append(f.formats, `"password" = %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordNot password doesn't equal
func (f *Filter) PasswordNot(v string) *Filter {
	f.formats = append(f.formats, `"password" != %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordContains password contains
func (f *Filter) PasswordContains(v string) *Filter {
	f.formats = append(f.formats, `"password" LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// PasswordNotContains password doesn't contain
func (f *Filter) PasswordNotContains(v string) *Filter {
	f.formats = append(f.formats, `"password" NOT LIKE '%%' || %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// PasswordStartsWith password starts with
func (f *Filter) PasswordStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"password" LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// PasswordNotStartsWith password doesn't start with
func (f *Filter) PasswordNotStartsWith(v string) *Filter {
	f.formats = append(f.formats, `"password" NOT LIKE %s || '%%'`)
	f.values = append(f.values, v)
	return f
}

// PasswordEndsWith password ends with
func (f *Filter) PasswordEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"password" LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordNotEndsWith password doesn't end with
func (f *Filter) PasswordNotEndsWith(v string) *Filter {
	f.formats = append(f.formats, `"password" NOT LIKE '%%' || %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordLt password is less than
func (f *Filter) PasswordLt(v string) *Filter {
	f.formats = append(f.formats, `"password" < %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordLte password is less than or equal
func (f *Filter) PasswordLte(v string) *Filter {
	f.formats = append(f.formats, `"password" <= %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordGt password is greater than
func (f *Filter) PasswordGt(v string) *Filter {
	f.formats = append(f.formats, `"password" > %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordGte password is greater than or equal
func (f *Filter) PasswordGte(v string) *Filter {
	f.formats = append(f.formats, `"password" >= %s`)
	f.values = append(f.values, v)
	return f
}

// PasswordIn password is in
func (f *Filter) PasswordIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"password" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// PasswordNotIn password is not in
func (f *Filter) PasswordNotIn(v ...string) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"password" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i)
	}
	return f
}

// UpdatedAt updated_at is equal to
func (f *Filter) UpdatedAt(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" = %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// UpdatedAtNot updated_at is not equal to
func (f *Filter) UpdatedAtNot(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" != %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// UpdatedAtIn updated_at is in
func (f *Filter) UpdatedAtIn(v ...time.Time) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"updated_at" IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i.Format("2006-01-02 15:04:05.999999999Z07:00"))
	}
	return f
}

// UpdatedAtNotIn updated_at is not in
func (f *Filter) UpdatedAtNotIn(v ...time.Time) *Filter {
	var rs []string
	if len(v) == 0 {
		f.formats = append(f.formats, `false`)
		return f
	}
	for range v {
		rs = append(rs, "%s")
	}
	f.formats = append(f.formats, fmt.Sprintf(`"updated_at" NOT IN (%s)`, strings.Join(rs, `, `)))
	for _, i := range v {
		f.values = append(f.values, i.Format("2006-01-02 15:04:05.999999999Z07:00"))
	}
	return f
}

// UpdatedAtLt updated_at is less than
func (f *Filter) UpdatedAtLt(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" < %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// UpdatedAtLte updated_at is less than or equal
func (f *Filter) UpdatedAtLte(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" <= %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// UpdatedAtGt updated_at is greater than
func (f *Filter) UpdatedAtGt(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" > %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// UpdatedAtGte updated_at is greater than or equal
func (f *Filter) UpdatedAtGte(v time.Time) *Filter {
	f.formats = append(f.formats, `"updated_at" >= %s`)
	f.values = append(f.values, v.Format("2006-01-02 15:04:05.999999999Z07:00"))
	return f
}

// OrderBy specificies the ORDERBy BY <order>
type OrderBy string

const (
	// ASC sorts by ascending order
	ASC OrderBy = "ASC"

	// DESC sorts by descending order
	DESC OrderBy = "DESC"
)

// NewOrder fn
func NewOrder() *Orderer {
	return &Orderer{}
}

var _ pogo.Condition = (*Orderer)(nil)

// Orderer orders the given fields
type Orderer struct {
	formats []string
}

// Clause fn
func (o *Orderer) Clause() *pogo.Clause {
	return &pogo.Clause{
		Type:   "ORDER BY",
		Format: strings.Join(o.formats, ", "),
	}
}

// CreatedAt sorts "created_at" by an expression
func (o *Orderer) CreatedAt(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"created_at" %s`, order))
	return o
}

// Email sorts "email" by an expression
func (o *Orderer) Email(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"email" %s`, order))
	return o
}

// ID sorts "id" by an expression
func (o *Orderer) ID(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"id" %s`, order))
	return o
}

// Name sorts "name" by an expression
func (o *Orderer) Name(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"name" %s`, order))
	return o
}

// Password sorts "password" by an expression
func (o *Orderer) Password(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"password" %s`, order))
	return o
}

// UpdatedAt sorts "updated_at" by an expression
func (o *Orderer) UpdatedAt(order OrderBy) *Orderer {
	o.formats = append(o.formats, fmt.Sprintf(`"updated_at" %s`, order))
	return o
}

// Model is an empty struct that has all the methods.
// It's primarly used for embedding the methods
// into higher-level models.
type Model struct{}

// Insert a ""public"."users"" into the "public"."users"
func Insert(db pogo.DB, user *Input) (*User, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)
	_ = _i

	// sql insert query, primary key provided by sequence
	var sqlstr string
	if len(_c) == 0 {
		sqlstr = `
      INSERT INTO "public"."users"
      DEFAULT VALUES
      RETURNING "created_at", "email", "id", "name", "password", "updated_at"
    `
	} else {
		sqlstr = `
      INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `)
      VALUES (` + strings.Join(_i, ", ") + `)
      RETURNING "created_at", "email", "id", "name", "password", "updated_at"
    `
	}

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		return nil, e
	}

	return &_user, nil
}

// Insert a ""public"."users"" into the "public"."users"
func (*Model) Insert(db pogo.DB, user *Input) (*User, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)
	_ = _i

	// sql insert query, primary key provided by sequence
	var sqlstr string
	if len(_c) == 0 {
		sqlstr = `
      INSERT INTO "public"."users"
      DEFAULT VALUES
      RETURNING "created_at", "email", "id", "name", "password", "updated_at"
    `
	} else {
		sqlstr = `
      INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `)
      VALUES (` + strings.Join(_i, ", ") + `)
      RETURNING "created_at", "email", "id", "name", "password", "updated_at"
    `
	}

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		return nil, e
	}

	return &_user, nil
}

// InsertMany ""public"."users"" into the "public"."users"
func InsertMany(db pogo.DB, users ...*Input) ([]*User, error) {
	_users := []*User{}
	for _, user := range users {
		_user, err := Insert(db, user)
		if err != nil {
			return _users, err
		}
		_users = append(_users, _user)
	}
	return _users, nil
}

// InsertMany ""public"."users"" into the "public"."users"
func (*Model) InsertMany(db pogo.DB, users ...*Input) ([]*User, error) {
	_users := []*User{}
	for _, user := range users {
		_user, err := Insert(db, user)
		if err != nil {
			return _users, err
		}
		_users = append(_users, _user)
	}
	return _users, nil
}

// Find a `User` by some conditions.
func Find(db pogo.DB, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "created_at", "email", "id", "name", "password", "updated_at" ` +
		`FROM "public"."users" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// Find a `User` by some conditions.
func (*Model) Find(db pogo.DB, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "created_at", "email", "id", "name", "password", "updated_at" ` +
		`FROM "public"."users" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// FindByID a `User` by some conditions.
func FindByID(db pogo.DB, id int) (*User, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "created_at", "email", "id", "name", "password", "updated_at"
    FROM "public"."users"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	var _user User
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// FindByID a `User` by some conditions.
func (*Model) FindByID(db pogo.DB, id int) (*User, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "created_at", "email", "id", "name", "password", "updated_at"
    FROM "public"."users"
    WHERE "id" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	var _user User
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// FindByEmail find a user by email
func FindByEmail(db pogo.DB, email string) (*User, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "created_at", "email", "id", "name", "password", "updated_at"
    FROM "public"."users"
    WHERE "email" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, email)
	}

	var _user User
	row := db.QueryRow(sqlstr, email)
	err := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt)
	if err != nil {
		if pogo.IsNoRows(err) {
			return nil, ErrUserNotFound
		}
		return nil, err
	}

	return &_user, nil
}

// FindByEmail find a user by email
func (*Model) FindByEmail(db pogo.DB, email string) (*User, error) {
	// sql select query, primary key provided by sequence
	sqlstr := `
    SELECT "created_at", "email", "id", "name", "password", "updated_at"
    FROM "public"."users"
    WHERE "email" = $1
  `

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, email)
	}

	var _user User
	row := db.QueryRow(sqlstr, email)
	err := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt)
	if err != nil {
		if pogo.IsNoRows(err) {
			return nil, ErrUserNotFound
		}
		return nil, err
	}
	return &_user, nil
}

// FindMany finds many "public"."users" by a condition
func FindMany(db pogo.DB, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return users, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "created_at", "email", "id", "name", "password", "updated_at" ` +
		`FROM "public"."users" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// FindMany finds many "public"."users" by a condition
func (*Model) FindMany(db pogo.DB, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return users, err
	}

	// sql select query, primary key provided by sequence
	sqlstr := `SELECT "created_at", "email", "id", "name", "password", "updated_at" ` +
		`FROM "public"."users" ` +
		_s

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// Update ""public"."users"" rows in "public"."users" by a condition, returning 1 result
func Update(db pogo.DB, user *Input, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := user.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.Update: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// Update ""public"."users"" rows in "public"."users" by a condition, returning 1 result
func (*Model) Update(db pogo.DB, user *Input, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := user.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.Update: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// UpdateMany updates ""public"."users"" rows in "public"."users" by conditions, returning all results
func UpdateMany(db pogo.DB, user *Input, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := user.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateMany: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// UpdateMany updates ""public"."users"" rows in "public"."users" by conditions, returning all results
func (*Model) UpdateMany(db pogo.DB, user *Input, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	fields := user.columns()

	// prepare the slices
	_c, _i, _v2 := slice(fields, len(_v))
	_v = append(_v, _v2...)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateMany: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// UpdateByID a "user" in "public"."users" by its ""id""
func UpdateByID(db pogo.DB, id int, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.ID(id)

	// get the columns
	fields := user.columns()

	// don't update the keys
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateByID: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "id" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, id)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// UpdateByID a "user" in "public"."users" by its ""id""
func (*Model) UpdateByID(db pogo.DB, id int, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.ID(id)

	// get the columns
	fields := user.columns()

	// don't update the keys
	delete(fields, "id")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateByID: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "id" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, id)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// UpdateByEmail find a User
func UpdateByEmail(db pogo.DB, email string, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.Email(email)

	// get the columns
	fields := user.columns()

	// don't update the keys
	delete(fields, "email")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateByEmail: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "email" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, email)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// UpdateByEmail find a User
func (*Model) UpdateByEmail(db pogo.DB, email string, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.Email(email)

	// get the columns
	fields := user.columns()

	// don't update the keys
	delete(fields, "email")

	// prepare the slices
	_c, _i, _v := slice(fields, 1)

	// setup the update fields
	var _u []string
	for i, c := range _c {
		_u = append(_u, c+" = "+_i[i])
	}

	// return an error if no update input is provided
	if len(_u) == 0 {
		return nil, errors.New("user.UpdateByEmail: no input provided")
	}

	// sql query
	sqlstr := `UPDATE "public"."users" SET ` +
		strings.Join(_u, ", ") + ` ` +
		`WHERE "email" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// setup the query
	values := []interface{}{}
	values = append(values, email)
	values = append(values, _v...)

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, values...)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, values...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// Delete `User`s by some conditions. Returns the first result.
// Warning: This can delete more than 1 row
func Delete(db pogo.DB, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// Delete `User`s by some conditions. Returns the first result.
// Warning: This can delete more than 1 row
func (*Model) Delete(db pogo.DB, conds ...pogo.Condition) (*User, error) {
	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return nil, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// DeleteMany `User`s by some conditions, returning all results.
func DeleteMany(db pogo.DB, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return users, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// DeleteMany `User`s by some conditions, returning all results.
func (*Model) DeleteMany(db pogo.DB, conds ...pogo.Condition) ([]*User, error) {
	users := []*User{}

	_s, _v, err := pogo.Conditions(conds...)
	if err != nil {
		return users, err
	}

	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		_s + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	rows, err := db.Query(sqlstr, _v...)
	if err != nil {
		return users, err
	}
	defer rows.Close()

	for rows.Next() {
		var _user User
		if e := rows.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
			if pogo.IsNoRows(e) {
				return users, ErrUserNotFound
			}
			return users, err
		}
		users = append(users, &_user)
	}
	if rows.Err() != nil {
		return users, rows.Err()
	}

	return users, nil
}

// DeleteByID deletes a "user"
func DeleteByID(db pogo.DB, id int) (*User, error) {
	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		`WHERE "id" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// DeleteByID deletes a "user"
func (*Model) DeleteByID(db pogo.DB, id int) (*User, error) {
	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		`WHERE "id" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, id)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, id)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// DeleteByEmail deletes a "user"
func DeleteByEmail(db pogo.DB, email string) (*User, error) {
	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		`WHERE "email" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, email)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, email)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// DeleteByEmail deletes a "user"
func (*Model) DeleteByEmail(db pogo.DB, email string) (*User, error) {
	// sql delete query
	sqlstr := `DELETE FROM "public"."users" ` +
		`WHERE "email" = $1 ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, email)
	}

	// run the query
	var _user User
	row := db.QueryRow(sqlstr, email)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil {
		if pogo.IsNoRows(e) {
			return nil, ErrUserNotFound
		}
		return nil, e
	}

	return &_user, nil
}

// Upsert inserts a `"public"."users"`, updating the row if `"id"` already exists.
func Upsert(db pogo.DB, user *Input) (*User, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// Upsert inserts a `"public"."users"`, updating the row if `"id"` already exists.
func (*Model) Upsert(db pogo.DB, user *Input) (*User, error) {
	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// UpsertByEmail inserts a `"public"."users"`, updating the row if `"email"` already exists.
func UpsertByEmail(db pogo.DB, email string, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.Email(email)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("email") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// UpsertByEmail inserts a `"public"."users"`, updating the row if `"email"` already exists.
func (*Model) UpsertByEmail(db pogo.DB, email string, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.Email(email)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("email") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// UpsertByID inserts a `"public"."users"`, updating the row if `"id"` already exists.
func UpsertByID(db pogo.DB, id int, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.ID(id)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// UpsertByID inserts a `"public"."users"`, updating the row if `"id"` already exists.
func (*Model) UpsertByID(db pogo.DB, id int, user *Input) (*User, error) {
	// add values to input, overriding existing keys if present in the input
	user = user.ID(id)

	// get all the non-nil columns and prepare them for the query
	_c, _i, _v := slice(user.columns(), 0)

	// setup the update fields
	var _u []string
	for _, c := range _c {
		_u = append(_u, c+" = excluded."+c)
	}

	// sql query
	sqlstr := `INSERT INTO "public"."users" (` + strings.Join(_c, ", ") + `) ` +
		`VALUES (` + strings.Join(_i, ", ") + `) ` +
		`ON CONFLICT ("id") ` +
		`DO UPDATE SET ` + strings.Join(_u, ", ") + ` ` +
		`RETURNING "created_at", "email", "id", "name", "password", "updated_at"`

	// log query if we've provided a logger
	if pogo.Log != nil {
		pogo.Log(sqlstr, _v...)
	}

	// run query
	var _user User
	row := db.QueryRow(sqlstr, _v...)
	if e := row.Scan(&_user.CreatedAt, &_user.Email, &_user.ID, &_user.Name, &_user.Password, &_user.UpdatedAt); e != nil && !pogo.IsNoRows(e) {
		return nil, e
	}

	return &_user, nil
}

// slice converts our columns into something the sql driver can understand
func slice(columns map[string]interface{}, offset int) (c []string, i []string, v []interface{}) {
	n := offset + 1
	for col, val := range columns {
		c = append(c, strconv.Quote(col))
		i = append(i, "$"+strconv.Itoa(n))
		v = append(v, val)
		n++
	}
	return c, i, v
}
